; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 -mtriple=riscv32 -mattr=+xcvsimd -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

declare <4 x i8> @llvm.abs.v4i8(<4 x i8>, i1)

; Avoid ABI issues by passing i32 instead of v4i8
define i32 @test.add.b(i32 %a, i32 %b) {
; CHECK-LABEL: test.add.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.add.b a0, a0, a1
; CHECK-NEXT:    ret
  %a.v = bitcast i32 %a to <4 x i8>
  %b.v = bitcast i32 %b to <4 x i8>
  %c = add <4 x i8> %a.v, %b.v
  %c.i = bitcast <4 x i8> %c to i32
  ret i32 %c.i
}

define i32 @test.add.sci.b(i32 %a) {
; CHECK-LABEL: test.add.sci.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.add.sci.b a0, a0, 2
; CHECK-NEXT:    ret
  %a.v = bitcast i32 %a to <4 x i8>
  %b.v0 = insertelement <4 x i8> undef, i8 2, i32 0
  %b.v1 = insertelement <4 x i8> %b.v0, i8 2, i32 1
  %b.v2 = insertelement <4 x i8> %b.v1, i8 2, i32 2
  %b.v3 = insertelement <4 x i8> %b.v2, i8 2, i32 3
  %c = add <4 x i8> %a.v, %b.v3
  %c.i = bitcast <4 x i8> %c to i32
  ret i32 %c.i
}

define i32 @test.add.sc.b(i32 %a, i8 %b) {
; CHECK-LABEL: test.add.sc.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $x12 killed $x11
; CHECK-NEXT:    cv.add.sc.b a0, a0, a1
; CHECK-NEXT:    ret
  %a.v = bitcast i32 %a to <4 x i8>
  %b.v0 = insertelement <4 x i8> undef, i8 %b, i32 0
  %b.v1 = insertelement <4 x i8> %b.v0, i8 %b, i32 1
  %b.v2 = insertelement <4 x i8> %b.v1, i8 %b, i32 2
  %b.v3 = insertelement <4 x i8> %b.v2, i8 %b, i32 3
  %c = add <4 x i8> %a.v, %b.v3
  %c.i = bitcast <4 x i8> %c to i32
  ret i32 %c.i
}


define i32 @test.add.sci.b.imm(i32 %a) {
; CHECK-LABEL: test.add.sci.b.ascend:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a3, 2
; CHECK-NEXT:    li a2, 1
; CHECK-NEXT:    # implicit-def: $x11
; CHECK-NEXT:    cv.packlo.b a1, a2, a3
; CHECK-NEXT:    li a3, 4
; CHECK-NEXT:    li a2, 3
; CHECK-NEXT:    cv.packhi.b a1, a2, a3
; CHECK-NEXT:    cv.add.b a0, a0, a1
; CHECK-NEXT:    ret
  %a.v = bitcast i32 %a to <4 x i8>
  %b.v0 = insertelement <4 x i8> undef, i8 1, i32 0
  %b.v1 = insertelement <4 x i8> %b.v0, i8 2, i32 1
  %b.v2 = insertelement <4 x i8> %b.v1, i8 3, i32 2
  %b.v3 = insertelement <4 x i8> %b.v2, i8 4, i32 3
  %c = add <4 x i8> %a.v, %b.v3
  %c.i = bitcast <4 x i8> %c to i32
  ret i32 %c.i
}


define i32 @test.insert(i32 %a, i8 %b) {
; CHECK-LABEL: test.insert:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $x12 killed $x11
; CHECK-NEXT:    cv.insert.b a0, a1, 0
; CHECK-NEXT:    ret
  %a.v = bitcast i32 %a to <4 x i8>
  %a.v1 = insertelement <4 x i8> %a.v, i8 %b, i32 0
  %c.i = bitcast <4 x i8> %a.v1 to i32
  ret i32 %c.i
}
